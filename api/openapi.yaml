openapi: 3.0.0
info:
  title: Key Management API
  version: 1.0.0
  description: API for key storage and rotation

servers:
  - description: Test
    url: https://gktivbb3r6.execute-api.us-east-1.amazonaws.com/v1

x-amazon-apigateway-request-validators:
  Validate All:
    validateRequestParameters: true
    validateRequestBody: true

#x-amazon-apigateway-authorizer
#    jwt-authorizer-autofind:
#        type: openIdConnect
#        openIdConnectUrl: >-
#        https://tyler-vendengine.oktapreview.com/oauth2/default/.well-known/openid-configuration
#        x-amazon-apigateway-authorizer:
#        type: jwt
#        jwtConfiguration:
#            audience:
#            - 'api://default'
#        identitySource: $request.header.Authorization

x-amazon-apigateway-gateway-responses:
  BAD_REQUEST_BODY:
    statusCode: 400
    responseTemplates:
      application/json: '{ "message": "$context.error.validationErrorString" }'
    responseParameters:
      gatewayresponse.header.Access-Control-Allow-Origin: "'*'"

tags:
  - name: Configuration

paths:
  /services:
    get:
      summary: Gets All Services
      tags:
        - Configuration
      responses:
        200:
          description: Service found and was returned
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceSummaries'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetServicesFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
    post:
      summary: Adds a new service
      tags:
        - Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: false
              properties:
                name:
                  type: string
                maxKeyAgeDays:
                  type: number
                  minimum: 14
                  maximum: 1365
                emails:
                  type: array
              required:
                - name
                - maxKeyAgeDays
                - emails
      responses:
        201:
          $ref: '#/components/responses/Created'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddServiceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /services/{serviceId}:
    parameters:
      - $ref: '#/components/parameters/serviceId'
    get:
      summary: Get details for a specific profile
      tags:
        - Configuration
      responses:
        200:
          description: Profile found and was returned
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetServiceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
    put:
      summary: Update details for a specific profile
      tags:
        - Configuration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        204:
          $ref: '#/components/responses/NoContent'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateServiceFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /services/{serviceId}/keys:
    parameters:
      - $ref: '#/components/parameters/serviceId'
    get:
      summary: Gets keys for a specific service
      tags:
        - Configuration
      responses:
        200:
          description: Keys found and returned
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeySummaries'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetKeysFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
    post:
      summary: Adds a new Key to a service
      tags:
        - Configuration
      responses:
        201:
          $ref: '#/components/responses/Created'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AddKeyFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /services/{serviceId}/keys/{keyId}:
    parameters:
      - $ref: '#/components/parameters/serviceId'
      - $ref: '#/components/parameters/keyId'
    get:
      summary: Gets key by Key Id
      tags:
        - Configuration
      responses:
        200:
          description: Key found and returned
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Key'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetKeyFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

    delete:
      summary: Remove key by Key Id and Service Id
      tags:
        - Configuration
      responses:
        200:
          description: Key Deleted
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteKeyFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

  /services/{serviceId}/keys/{keyId}/rotate:
    parameters:
      - $ref: '#/components/parameters/serviceId'
      - $ref: '#/components/parameters/keyId'
    post:
      summary: Rotate key for service
      tags:
        - Configuration
      responses:
        201:
          $ref: '#/components/responses/Created'
        403:
          $ref: '#/components/responses/FrozenError'
        500:
          $ref: '#/components/responses/UnknownError'
      x-amazon-apigateway-request-validator: Validate All
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AdminRotateKeyFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy

components:
  parameters:
    serviceId:
      name: serviceId
      description: Unique identifier for a service
      required: true
      in: path
      schema:
        type: string
    keyId:
      name: keyId
      description: Unique identifier for a key
      required: true
      in: path
      schema:
        type: string
  securitySchemes:
    JwtLambdaAuthorizer:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: A JSON Web Token that identifies the logged in user. Issuer and audience will be validated based on the environment being used.
## https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-swagger-extensions-authorizer.html
#    jwt-authorizer-autofind:
#      type: openIdConnect
#      openIdConnectUrl: >-
#        https://tyler-vendengine.oktapreview.com/oauth2/default/.well-known/openid-configuration
#      x-amazon-apigateway-authorizer:
#        type: jwt
#        jwtConfiguration:
#          audience:
#            - 'api://default'
#        identitySource: $request.header.Authorization

  schemas:
    KeySummaries:
      type: array
      items:
        $ref: "#/components/schemas/Key"

    ServiceSummaries:
      type: object
      properties:
        services:
          type: array
          items:
            type: object
            properties:
              serviceId:
                type: string
              name:
                type: string
              status:
                type: string
                enum: [ Compliant, Non-Compliant, Unknown, Frozen ]
    Service:
      type: object
      properties:
        serviceId:
          type: string
        name:
          type: string
        status:
          type: string
        maxKeyAgeDays:
          type: number
        emails:
          type: array
          items:
            type: string
    Key:
      type: object
      properties:
        keyId:
          type: string
        key:
          type: string
        status:
          type: string
          enum: [ Active, Expiring ]
        expirationDate:
          type: number
          description: Unix timestamp
        createdDate:
          type: number
          description: Unix timestamp

  responses:
    NoContent:
      description: The operation was successful and had no data to return

    Created:
      description: The operation completed successfully
      content:
        application/json:
          schema:
            type: object
            required:
              - serviceId
            properties:
              serviceId:
                type: string
                example: The identifier of the created service

    BadRequest:
      description: The input format was incorrect
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: The input format is incorrect

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                example: The requested resource was not found
    FrozenError:
      description: Service is Frozen.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Service Frozen
                example: Service Is Frozen.
    UnknownError:
      description: An unexpected error occurred on the server.
      content:
        application/json:
          schema:
            type: object
            required:
              - message
            properties:
              message:
                type: string
                description: Unknown error message
                example: An unexpected error occurred.