AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS Key Management Service (KMS) is a managed service that makes it easy to expire and renew keys used for cross applcation authentication. This is designed to be used for System to System Validation

Parameters:
  DomainName:
    Type: String
    Default: 'corrections-dev.tylermobileapps.com'
  CORSOrigin:
    Type: String
    Default: '*'
  HostedZoneId:
    Type: String
    Default: 'Z0400568NBE46SDQ3ZZN'

Globals:
  Function:
    Runtime: nodejs20.x
    Tracing: Active
    Timeout: 10
    MemorySize: 1024
    Handler: index.handler
    Layers:
      - !Ref DependencyLayer
    Environment:
      Variables:
        AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
        CORS_ORIGIN: !Ref CORSOrigin
  Api:
    Cors:
      AllowMethods: "'POST,GET,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Accept,Content-Type,Authorization,X-Amz-Security-Token,X-Amz-Date,X-Api-Key,InstanceId'"
      AllowOrigin: "'*'"

Resources:
  DependencyLayer:
    Type: AWS::Serverless::LayerVersion
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Metadata:
      BuildMethod: nodejs20.x
      BuildArchitecture: x86_64
    Properties:
      LayerName: dependency-layer
      ContentUri: layers/dependencies
      CompatibleRuntimes:
        - nodejs20.x

  KMSTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        Enabled: true
        AttributeName: expirationDate
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: sort
          AttributeType: S
        - AttributeName: expirationDate
          AttributeType: N
      GlobalSecondaryIndexes:
        - IndexName: types
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: sort
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: expirationDate
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: expirationDate
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

#  CognitoUserPoolClient:
#    Type: AWS::Cognito::UserPoolClient
#    Properties:
#      ClientName: ContentUserPoolClient
#      UserPoolId: !Ref CognitoUserPool
#      AllowedOAuthFlows:
#        - code
#      AllowedOAuthScopes:
#        - email
#        - openid
#        - profile
#      CallbackURLs:
#        - http://localhost:3000
#        - http://localhost:3000/oauth2/idpresponse
#        - !Sub https://${DomainName}
#        - !Sub https://${DomainName}/oauth2/idpresponse
#        - !Sub https://auth.${DomainName}
#        - !Sub https://auth.${DomainName}/oauth2/idpresponse
#      LogoutURLs:
#        - http://localhost:3000/logout
#        - !Sub https://${DomainName}/logout
#      AllowedOAuthFlowsUserPoolClient: true
#      ExplicitAuthFlows:
#        - ALLOW_USER_SRP_AUTH
#        - ALLOW_REFRESH_TOKEN_AUTH
#
#  CognitoIdentityPool:
#    Type: AWS::Cognito::IdentityPool
#    Properties:
#      IdentityPoolName: ContentIdentityPool
#      AllowUnauthenticatedIdentities: false
#      CognitoIdentityProviders:
#        - ClientId: !Ref CognitoUserPoolClient
#          ProviderName: !Sub cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPool}
#
#  CognitoAuthenticatedRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: '2012-10-17'
#        Statement:
#        - Effect: 'Allow'
#          Principal:
#            Federated: 'cognito-identity.amazonaws.com'
#          Action: 'sts:AssumeRoleWithWebIdentity'
#          Condition:
#            StringEquals:
#              'cognito-identity.amazonaws.com:aud': !Ref CognitoIdentityPool
#            'ForAnyValue:StringLike':
#              'cognito-identity.amazonaws.com:amr': authenticated
#      Policies:
#      - PolicyName: CognitoAuthorizedPolicy
#        PolicyDocument:
#          Version: 2012-10-17
#          Statement:
#          - Effect: Allow
#            Action: execute-api:Invoke
#            Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AdminApi}/v1/*/*
#
#  CognitoIdentityPoolRoles:
#    Type: AWS::Cognito::IdentityPoolRoleAttachment
#    Properties:
#      IdentityPoolId: !Ref CognitoIdentityPool
#      Roles:
#        authenticated: !GetAtt CognitoAuthenticatedRole.Arn
#
#  AuthCertificate:
#    Type: AWS::CertificateManager::Certificate
#    Properties:
#      DomainName: !Sub auth.${DomainName}
#      ValidationMethod: DNS
#      DomainValidationOptions:
#        - DomainName: !Sub auth.${DomainName}
#          HostedZoneId: !Ref HostedZoneId
#
#  CognitoUserPool:
#    Type: AWS::Cognito::UserPool
#    DeletionPolicy: Delete
#    UpdateReplacePolicy: Delete
#    Properties:
#      UserPoolName: KeyManagementUserPool
#      UsernameAttributes:
#        - email
#      AutoVerifiedAttributes:
#        - email
#      Policies:
#        PasswordPolicy:
#          MinimumLength: 8
#          RequireUppercase: true
#          RequireLowercase: true
#          RequireNumbers: true
#          RequireSymbols: false
#
#  CognitoUserPoolDomain:
#    Type: AWS::Cognito::UserPoolDomain
#    Properties:
#      UserPoolId: !Ref CognitoUserPool
#      Domain: !Sub auth.${DomainName}
#      CustomDomainConfig:
#        CertificateArn: !Ref AuthCertificate
#
#  CustomDomainDnsRecord:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      HostedZoneId: !Ref HostedZoneId
#      Name: !Sub auth.${DomainName}
#      ResourceRecords:
#        - !GetAtt CognitoUserPoolDomain.CloudFrontDistribution
#      TTL: "300"
#      Type: CNAME

  AdminApi:
    Type: AWS::Serverless::Api
    Properties:
      TracingEnabled: true
      StageName: v1
      AccessLogSetting:
        DestinationArn: !GetAtt AdminApiGatewayAccessLogGroup.Arn
        Format: '{"request_time": "$context.requestTime", "resource_path": "$context.resourcePath", "http_method": "$context.httpMethod", "status": "$context.status", "response_length": "$context.responseLength", "response_type": "$context.responseType", "request_id": "$context.requestId", "error_message": "$context.error.message", "validation_error_string": "$context.error.validationErrorString"}'
      MethodSettings:
        - MetricsEnabled: True
          ResourcePath: "/*"
          HttpMethod: "*"
          LoggingLevel: INFO
          DataTraceEnabled: True
      Auth:
        DefaultAuthorizer: LambdaAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          LambdaAuthorizer:
            FunctionPayloadType: REQUEST
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            FunctionInvokeRole: !GetAtt AuthorizerExecutionRole.Arn
            Identity:
              Headers:
                - Authorization
              ReauthorizeEvery: 3600
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./openapi.yaml
# No auth
  KeyApi:
   Type: AWS::Serverless::Api
   Properties:
     TracingEnabled: true
     StageName: v1
     DefinitionBody:
       Fn::Transform:
         Name: AWS::Include
         Parameters:
           Location: ./openapi-public.yaml

  AdminApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: /aws/vendedlogs/states/AdminApiGatewayAccess
      RetentionInDays: 1

#  APICertificate:
#    Type: AWS::CertificateManager::Certificate
#    Properties:
#      DomainName: !Sub api.${DomainName}
#      ValidationMethod: DNS
#      DomainValidationOptions:
#        - DomainName: !Sub api.${DomainName}
#          HostedZoneId: !Ref HostedZoneId

#  ApiGatewayDomainName:
#    Type: AWS::ApiGateway::DomainName
#    Properties:
#      DomainName: !Sub api.${DomainName}
#      CertificateArn: !Ref APICertificate
#
#  AdminApiBasePathMapping:
#    Type: AWS::ApiGateway::BasePathMapping
#    Properties:
#      DomainName: !Ref ApiGatewayDomainName
#      RestApiId: !Ref AdminApi
#      Stage: v1
#      BasePath: admin

  # PublicApiBasePathMapping:
  #   Type: AWS::ApiGateway::BasePathMapping
  #   Properties:
  #     DomainName: !Ref ApiGatewayDomainName
  #     RestApiId: !Ref ChatPublicApi
  #     Stage: v1

#  Route53RecordSet:
#    Type: AWS::Route53::RecordSet
#    Properties:
#      HostedZoneId: !Ref HostedZoneId
#      Name: !Sub api.${DomainName}
#      Type: CNAME
#      TTL: "3600"
#      ResourceRecords:
#        - !GetAtt ApiGatewayDomainName.DistributionDomainName

  AuthorizerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: InvokeLambdaAuth
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt AuthorizerFunction.Arn

  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/authorizer
      Environment:
        Variables:
          ISSUER: "https://tyler-vendengine.oktapreview.com/oauth2/default"
          AUDIENCES: "api://default"
      Policies:
        - AWSLambdaBasicExecutionRole

  GetKeysFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-keys
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services/{serviceId}/keys
            Method: GET

  GetKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-key
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services/{serviceId}/keys/{keyId}
            Method: GET

  DeleteKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/delete-key
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:DeleteItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services/{serviceId}/keys/{keyId}
            Method: DELETE

  AdminRotateKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/rotate-key
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:GetItem
                - dynamodb:UpdateItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services/{serviceId}/keys/{keyId}/rotate
            Method: POST

  AddKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/add-key
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services/{serviceId}/keys
            Method: POST

  GetServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-services
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services
            Method: GET

  AddServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/add-service
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services
            Method: POST

  GetServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/get-service
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:GetItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /services/{serviceId}
            Method: GET

  UpdateServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/update-service
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:PutItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref AdminApi
            Path: /service/{serviceId}
            Method: PUT

  PublicVerifyKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/public-verify-key
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${KMSTable.Arn}/index/types
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref KeyApi
            Path: /verify
            Method: GET

  PublicRotateKeyFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/public-rotate-key
      Policies:
        - AWSLambdaBasicExecutionRole
        - Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:Query
              Resource: !Sub ${KMSTable.Arn}/index/types
            - Effect: Allow
              Action:
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt KMSTable.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref KMSTable
      Events:
        FromApi:
          Type: Api
          Properties:
            RestApiId: !Ref KeyApi
            Path: /rotate-key
            Method: GET

  # TalkToSantaFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions/talk-to-santa
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action: secretsmanager:GetSecretValue
  #             Resource: !Ref MomentoSecret
  #           - Effect: Allow
  #             Action: events:PutEvents
  #             Resource: !Sub arn:${AWS::Partition}:events:${AWS::Region}:${AWS::AccountId}:event-bus/default
  #     Environment:
  #       Variables:
  #         SECRET_ID: !Ref MomentoSecret
  #     FunctionUrlConfig:
  #       AuthType: NONE
  # SendChatMessageFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions\send-chat-message
  #     Timeout: 120
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action: dynamodb:Query
  #             Resource: !Sub ${KMSTable.Arn}/index/types
  #           - Effect: Allow
  #             Action: dynamodb:UpdateItem
  #             Resource: !GetAtt KMSTable.Arn
  #           - Effect: Allow
  #             Action:
  #               - secretsmanager:GetSecretValue
  #             Resource: !Ref MomentoSecret
  #     Environment:
  #       Variables:
  #         SECRET_ID: !Ref MomentoSecret
  #         CACHE_NAME: !Ref DefaultCache
  #         TABLE_NAME: !Ref KMSTable
  #     Events:
  #       EventBridge:
  #         Type: EventBridgeRule
  #         Properties:
  #           Pattern:
  #             detail-type:
  #               - New Chat Message
  #             source:
  #               - webhook

  # JoinChatFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions/join-chat
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action:
  #               - secretsmanager:GetSecretValue
  #             Resource: !Ref MomentoSecret
  #           - Effect: Allow
  #             Action: dynamodb:Query
  #             Resource: !Sub ${KMSTable.Arn}/index/types
  #     Environment:
  #       Variables:
  #         SECRET_ID: !Ref MomentoSecret
  #         TABLE_NAME: !Ref KMSTable
  #         CACHE_NAME: !Ref DefaultCache
  #     Events:
  #       FromApi:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref ChatPublicApi
  #           Path: /sessions
  #           Method: POST

  # ResetChatFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: functions\reset-chat
  #     Policies:
  #       - AWSLambdaBasicExecutionRole
  #       - Version: 2012-10-17
  #         Statement:
  #           - Effect: Allow
  #             Action: dynamodb:UpdateItem
  #             Resource: !GetAtt KMSTable.Arn
  #           - Effect: Allow
  #             Action:  secretsmanager:GetSecretValue
  #             Resource: !Ref MomentoSecret
  #     Environment:
  #       Variables:
  #         SECRET_ID: !Ref MomentoSecret
  #         CACHE_NAME: !Ref DefaultCache
  #         TABLE_NAME: !Ref KMSTable
  #     Events:
  #       FromApi:
  #         Type: Api
  #         Properties:
  #           RestApiId: !Ref AdminApi
  #           Path: /profiles/{passcode}/sessions
  #           Method: DELETE

Outputs:
  APIEndpoint:
    Description: "API endpoint"
    Value: !Sub "https://${AdminApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
  KeyAPIEndpoint:
    Description: "Key API endpoint"
    Value: !Sub "https://${KeyApi}.execute-api.${AWS::Region}.amazonaws.com/v1"
#  UserPoolClientId:
#    Description: Id of user pool client
#    Value: !Ref CognitoUserPoolClient
#  IdentityPoolId:
#    Description: Id of the identity pool
#    Value: !Ref CognitoIdentityPool
#  UserPoolId:
#    Description: Id of the user pool
#    Value: !Ref CognitoUserPool